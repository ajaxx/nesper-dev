<?xml version="1.0" encoding="UTF-8"?>
<!-- We use a no xsi:noNamespaceSchemaLocation rather than the following to ensure we use the xsd from the codebase
    rather than the published one
    [esper-configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.espertech.com/schema/esper" xsi:schemaLocation="
    http://www.espertech.com/schema/esper http://www.espertech.com/schema/esper/esper-configuration-7-0.xsd"]
-->
<esper-configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns="http://www.espertech.com/schema/esper" xsi:noNamespaceSchemaLocation="../esper-configuration-8-0.xsd">
  <common>
    <event-type name="MySampleEventOne" class="com.mycompany.myapp.MySampleEventOne"/>
    <event-type name="MySampleEventTwo" class="com.mycompany.myapp.MySampleEventTwo"/>

    <event-type name="MyNoSchemaXMLEventName">
      <xml-dom root-element-name="MyNoSchemaEvent">
        <xpath-property property-name="element1" xpath="/myevent/element1" type="number"/>
      </xml-dom>
    </event-type>

    <event-type name="MySchemaXMLEventName">
      <xml-dom root-element-name="MySchemaEvent" root-element-namespace="samples:schemas:simpleSchema" schema-resource="MySchemaXMLEvent.xsd" schema-text="actual-xsd-text-here" default-namespace="default-name-space" xpath-resolve-properties-absolute="false" xpath-property-expr="true" xpath-function-resolver="com.mycompany.OptionalFunctionResolver" xpath-variable-resolver="com.mycompany.OptionalVariableResolver" event-sender-validates-root="false" auto-fragment="false" start-timestamp-property-name="startts" end-timestamp-property-name="endts">
        <namespace-prefix prefix="ss" namespace="samples:schemas:simpleSchema"/>
        <xpath-property property-name="element2" xpath="/myevent/element2" type="string" cast="long"/>
        <xpath-property property-name="element3" xpath="/bookstore/book" type="nodeset" event-type-name="MyOtherXMLNodeEvent"/>
      </xml-dom>
    </event-type>

    <event-type name="MyMapEvent">
      <map supertype-names="MyMapSuperType1, MyMapSuperType2" start-timestamp-property-name="startts" end-timestamp-property-name="endts">
        <map-property name="myInt" class="int"/>
        <map-property name="myString" class="string"/>
      </map>
    </event-type>

    <event-type name="MyObjectArrayEvent">
      <objectarray supertype-names="MyObjectArraySuperType1, MyObjectArraySuperType2" start-timestamp-property-name="startts" end-timestamp-property-name="endts">
        <objectarray-property name="myInt" class="int"/>
        <objectarray-property name="myString" class="string"/>
      </objectarray>
    </event-type>

    <event-type name="MyLegacyTypeEvent" class="com.mycompany.package.MyLegacyTypeEvent">
      <legacy-type accessor-style="public" code-generation="enabled" property-resolution-style="case_insensitive" factory-method="com.mycompany.myapp.MySampleEventFactory.createMyLegacyTypeEvent" copy-method="myCopyMethod" start-timestamp-property-name="startts" end-timestamp-property-name="endts">
        <method-property name="mymethodprop" accessor-method="myAccessorMethod" />
        <field-property name="myfieldprop" accessor-field="myFieldName" />
      </legacy-type>
    </event-type>

    <event-type name="MyAvroEvent">
      <avro schema-text="{&quot;type&quot;:&quot;record&quot;,&quot;name&quot;:&quot;typename&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;num&quot;,&quot;type&quot;:&quot;int&quot;}]}"/>
    </event-type>

    <event-type name="MyAvroEventTwo">
      <avro schema-text='{"type":"record","name":"MyAvroEvent","fields":[{"name":"carId","type":"int"},{"name":"carType","type":{"type":"string","avro.string":"string"}}]}' start-timestamp-property-name="startts" end-timestamp-property-name="endts" supertype-names="SomeSuperAvro,SomeSuperAvroTwo"/>
    </event-type>

    <variant-stream name="MyVariantStream" type-variance="any">
      <variant-event-type name="MyEvenTypetNameOne"/>
      <variant-event-type name="MyEvenTypetNameTwo"/>
    </variant-stream>

    <auto-import import-namespace="com.mycompany.myapp"/>
    <auto-import import-type="com.mycompany.myapp.ClassOne"/>
    <auto-import import-namespace="com.mycompany.myapp" assembly="AssemblyA"/>
    <auto-import import-namespace="com.mycompany.myapp" assembly="AssemblyB.dll"/>
    <auto-import import-type="com.mycompany.myapp.ClassTwo" assembly="AssemblyB.dll"/>

    <auto-import-annotations import-namespace="com.mycompany.myapp.annotations"/>
    <auto-import-annotations import-type="com.mycompany.myapp.annotations.ClassOne"/>

    <method-reference class-name="abc">
      <expiry-time-cache max-age-seconds="91" purge-interval-seconds="92.2" ref-type="weak"/>
    </method-reference>
    <method-reference class-name="def">
      <lru-cache size="20"/>
    </method-reference>

    <database-reference name="mydb1">
      <driver type="PgSQL" connection-string="Host=nesper-pgsql-integ.local;Database=test;Username=esper;Password=3sp3rP@ssw0rd;"/>
      <connection-lifecycle value="pooled"/>
      <lru-cache size="10"/>
      <column-change-case value="lowercase"/>
      <metadata-origin value="sample" />
    </database-reference>

    <database-reference name="mydb2">
      <driver type="PgSQL" connection-string="Host=nesper-pgsql-integ.local;Database=test;Username=esper;Password=3sp3rP@ssw0rd;"/>
      <connection-settings auto-commit="false" catalog="test" read-only="true" transaction-isolation="ReadCommitted" />
      <connection-lifecycle value="retain"/>
      <expiry-time-cache max-age-seconds="60.5" purge-interval-seconds="120.1" ref-type="hard"/>
      <column-change-case value="uppercase"/>
      <metadata-origin value="metadata" />
    </database-reference>

    <variable name="var1" type="int" initialization-value="1"/>
    <variable name="var2" type="string"/>
    <variable name="var3" type="string" constant="true"/>

    <event-meta>
      <class-property-resolution style="distinct_case_insensitive" accessor-style="public"/>
      <event-representation type="map"/>
      <avro-settings enable-avro="false" enable-native-string="false" enable-schema-default-nonnull="false" objectvalue-typewidener-factory-class="myObjectValueTypeWidenerFactoryClass" type-representation-mapper-class="myTypeToRepresentationMapperClass"/>
    </event-meta>

    <logging>
      <query-plan enabled="true"/>
      <jdbc enabled="true"/>
    </logging>

    <time-source>
      <time-unit value="microseconds"/>
    </time-source>

    <execution threading-profile="large"/>

    <event-type-auto-name package-name="com.mycompany.eventsone"/>
    <event-type-auto-name package-name="com.mycompany.eventstwo"/>
  </common>

  <compiler>
    <plugin-view namespace="ext0" name="myview0" forge-class="com.mycompany.MyViewForge0" />
    <plugin-view namespace="ext1" name="myview1" forge-class="com.mycompany.MyViewForge1" />

    <plugin-virtualdw namespace="vdw0" name="myvdw0" forge-class="com.mycompany.MyVdwForge0" />
    <plugin-virtualdw namespace="vdw1" name="myvdw1" forge-class="com.mycompany.MyVdwForge1" config="abc" />

    <plugin-aggregation-function name="func1a" forge-class="com.mycompany.MyMatrixAggregationMethod0Forge" />
    <plugin-aggregation-function name="func2a" forge-class="com.mycompany.MyMatrixAggregationMethod1Forge" />

    <plugin-aggregation-multifunction function-names="func1,func2" forge-class="com.mycompany.MyAggregationMultiFunctionForge">
      <init-arg name="prop1" value="value1"/>
    </plugin-aggregation-multifunction>

    <plugin-singlerow-function name="func3" function-class="com.mycompany.MyMatrixSingleRowMethod0" function-method="method1" />
    <plugin-singlerow-function name="func4" function-class="com.mycompany.MyMatrixSingleRowMethod1" function-method="method2" value-cache="enabled" filter-optimizable="disabled" rethrow-exceptions="true" event-type-name="XYZEventTypeName" />

    <plugin-pattern-guard namespace="ext0" name="guard1" forge-class="com.mycompany.MyGuardForge0"/>
    <plugin-pattern-guard namespace="ext1" name="guard2" forge-class="com.mycompany.MyGuardForge1"/>
    <plugin-pattern-observer namespace="ext0" name="observer1" forge-class="com.mycompany.MyObserverForge0" />
    <plugin-pattern-observer namespace="ext1" name="observer2" forge-class="com.mycompany.MyObserverForge1" />

    <bytecode include-comments="true" include-debugsymbols="true" attach-epl="false" attach-module-epl="true" instrumented="true" allow-subscriber="true" access-modifier-context="internal" access-modifier-event-type="public" access-modifier-expression="internal" access-modifier-named-window="public" access-modifier-script="internal" access-modifier-table="public" access-modifier-variable="internal" bus-modifier-event-type="bus"/>

    <logging>
      <code enabled="true"/>
    </logging>

    <stream-selection>
      <stream-selector value="irstream" />
    </stream-selection>

    <language sort-using-collator="true"/>

    <scripts default-dialect="abc"/>

    <expression integer-division="true" division-by-zero-is-null="true" udf-cache="false" extended-agg="false" ducktyping="true" math-context="Precision=2 RoundingMode=ToEven"/>

    <execution filter-service-max-filter-width="100" enable-declared-expr-value-cache="false"/>

    <view-resources>
      <iterable-unbound enabled="true"/>
      <outputlimitopt enabled="false"/>
    </view-resources>
  </compiler>

  <runtime>
    <plugin-loader name="Loader1" class-name="com.espertech.esper.support.plugin.SupportLoaderOne">
      <init-arg name="name1" value="val1"/>
      <init-arg name="name2" value="val2"/>
      <config-xml>
        <sample-initializer>
          <some-any-xml-can-be-here>This section for use by a plugin loader.</some-any-xml-can-be-here>
        </sample-initializer>
      </config-xml>
    </plugin-loader>
    <plugin-loader name="Loader2" class-name="com.espertech.esper.support.plugin.SupportLoaderTwo" />

    <threading runtime-fairlock="true">
      <listener-dispatch preserve-order="false" timeout-msec="2000" locking="suspend"/>
      <insert-into-dispatch preserve-order="false" timeout-msec="3000" locking="suspend"/>
      <named-window-consumer-dispatch preserve-order="false" timeout-msec="4000" locking="suspend"/>
      <internal-timer enabled="false" msec-resolution="1234567"/>
      <threadpool-inbound enabled="true" num-threads="1" capacity="1000"/>
      <threadpool-outbound enabled="true" num-threads="2" capacity="1500" />
      <threadpool-timerexec enabled="true" num-threads="3"/>
      <threadpool-routeexec enabled="true" num-threads="4" capacity="2000"/>
    </threading>

    <logging>
      <execution-path enabled="true"/>
      <timer-debug enabled="false"/>
      <audit pattern="[%u] %m"/>
    </logging>

    <variables>
      <msec-version-release value="30000"/>
    </variables>

    <time-source>
      <time-source-type value="nano" />
    </time-source>

    <metrics-reporting enabled="true" runtime-interval="4000" statement-interval="500" threading="false" runtime-metrics="true">
      <stmtgroup name="MyStmtGroup" interval="5000" default-include="true" num-stmts="50" report-inactive="true">
        <!-- samples of include/exclude using RegEx and SQL-Like syntax -->
        <include-regex>.*</include-regex>
        <exclude-regex>.*test.*</exclude-regex>
        <exclude-like>%MyMetricsStatement%</exclude-like>
        <include-like>%MyFraudAnalysisStatement%</include-like>
        <include-like>%SomerOtherStatement%</include-like>
      </stmtgroup>
      <stmtgroup name="MyStmtGroupTwo" interval="200"/>
    </metrics-reporting>

    <exceptionHandling undeploy-rethrow-policy="rethrow_first">
      <handlerFactory class="my.company.cep.LoggingExceptionHandlerFactory"/>
      <handlerFactory class="my.company.cep.AlertExceptionHandlerFactory"/>
    </exceptionHandling>

    <conditionHandling>
      <handlerFactory class="my.company.cep.LoggingConditionHandlerFactory"/>
      <handlerFactory class="my.company.cep.AlertConditionHandlerFactory"/>
    </conditionHandling>

    <patterns>
      <max-subexpression value="3" prevent-start="false"/>
    </patterns>

    <match-recognize>
      <max-state value="3" prevent-start="false"/>
    </match-recognize>

    <expression self-subselect-preeval="false" time-zone="GMT-4:00" />

    <execution prioritized="true" fairlock="true" disable-locking="true" filter-service-profile="readwrite" declared-expr-value-cache-size="101"/>
  </runtime>

</esper-configuration>