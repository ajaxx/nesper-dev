///////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2006-2019 Esper Team. All rights reserved.                           /
// http://esper.codehaus.org                                                          /
// ---------------------------------------------------------------------------------- /
// The software in this package is published under the terms of the GPL license       /
// a copy of which has been included with this distribution in the license.txt file.  /
///////////////////////////////////////////////////////////////////////////////////////

using System;

using com.espertech.esper.common.client;
using com.espertech.esper.common.@internal.epl.expression.core;
using com.espertech.esper.common.@internal.epl.variable.core;
using com.espertech.esper.compat.threading.threadlocal;

namespace com.espertech.esper.common.@internal.filterspec
{
    /// <summary>
    ///     Adapter to evaluate boolean expressions, providing
    ///     events per stream to expression nodes. Generated by @{link FilterSpecParamExprNode} for
    ///     boolean expression filter parameters.
    /// </summary>
    public sealed class ExprNodeAdapterMSPlain : ExprNodeAdapterMSBase
    {
        private readonly IThreadLocal<EventBean[]> _arrayPerThread;
        private readonly VariableManagementService _variableService;

        public ExprNodeAdapterMSPlain(
            FilterSpecParamExprNode factory,
            ExprEvaluatorContext evaluatorContext,
            EventBean[] prototype,
            VariableManagementService variableService)
            : base(factory, evaluatorContext, prototype)
        {
            _variableService = variableService;

            _arrayPerThread = new SlimThreadLocal<EventBean[]>(
                () => {
                    var eventsPerStream = new EventBean[prototypeArray.Length];
                    Array.Copy(prototypeArray, 0, eventsPerStream, 0, prototypeArray.Length);
                    return eventsPerStream;
                });
        }

        public override bool Evaluate(EventBean theEvent)
        {
            _variableService?.SetLocalVersion();

            var eventsPerStream = _arrayPerThread.GetOrCreate();
            eventsPerStream[0] = theEvent;
            return EvaluatePerStream(eventsPerStream);
        }
    }
} // end of namespace